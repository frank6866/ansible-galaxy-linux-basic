---

- name: stop and disable firewalld
  service: name=firewalld state=stopped enabled=no
  when: linux_basic_disable_firewall
  ignore_errors: true

- name: disable selinux
  selinux: state=disabled
  when: linux_basic_disable_selinux

- name: set timezone
  timezone: name={{ linux_basic_timezone }}
  when: linux_basic_timezone is defined
  ignore_errors: true

- name: setting sysctl entries
  sysctl: name={{ item.name }} value={{ item.value }} ignoreerrors=yes
  with_items: "{{ linux_basic_sysctl_pair | default([])}}"
  when: linux_basic_sysctl_pair is defined

- name: install ntp
  yum: name=ntp state=present
  when: linux_basic_ntp_installed

- name: template /etc/ntp.conf
  template: src=etc/ntp.conf dest=/etc/ntp.conf mode=644
  notify: restart ntpd
  when: linux_basic_ntp_installed

- name: start and enable ntpd
  service: name=ntpd state=started enabled=yes
  when: linux_basic_ntp_installed

- name: install epel
  yum: name=epel-release state=present
  when: linux_basic_install_epel

- name: install packages
  yum: name={{ item }} state=present
  with_items: "{{ linux_basic_installed_packages | default([])}}"
  when: linux_basic_install_epel

- name: config /etc/hosts file when not registered in DNS
  lineinfile: dest=/etc/hosts regexp="{{ item.ip }}    {{ item.hostname }}"
              line="{{ item.ip }}    {{ item.hostname }}" state={{ item.state }}
              backup=yes
  with_items: "{{ ip_hostname_in_etc_hosts | default([])}}"
  when: ip_hostname_in_etc_hosts is defined


- name: comment Defaults requiretty in /etc/sudoers
  replace: dest=/etc/sudoers regexp='^Defaults    requiretty' replace='# Defaults    requiretty'

- name: set wheel group executing sudo without password
  lineinfile: dest=/etc/sudoers regexp="^%wheel" state=present
              line="%wheel ALL=(ALL) NOPASSWD{{ ":" }} ALL"
              backup=yes

- name: create users
  user: name={{ item.name }} groups={{ item.group | default(omit)}}  shell=/bin/bash state={{ item. state }}
  with_items: "{{ linux_basic_users | default([])}}"
#  when: linux_basic_users is defined

- name: add public key for user
  authorized_key: user={{ item.name }} key={{ item.public_key }}  state={{ item. state }}
  with_items: "{{ linux_basic_users | default([])}}"
#  when: linux_basic_users is defined
  ignore_errors: true




